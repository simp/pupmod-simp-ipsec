# == Class: libreswan
#
# Module 'libreswan' installs and configures libreswan for use with IPSEC
# tunnels.  It is very important you read the documentation that comes with
# libreswan before attempting to use this module.
#
# https://libreswan.org
#
# At this time the current version of libreswan is 3.1.7.
#
#
# === Welcome to SIMP!
# This module is a component of the System Integrity Management Platform, a
# a managed security compliance framework built on Puppet.
#
# ---
# libreswan is designed to install and configure the ipsec service from libreswan.
# It will also configure and maintain the NSS database used by ipsec if you have
# chosen to let simp manage your PKI certificates.
#
# To add and start tunnels that will be managed by the ipsec service see the module
# libreswan::add_connection.
# ---
#
# This module is optimally designed for use within a larger SIMP ecosystem, but
# it can be used independently:
#
# * When included within the SIMP ecosystem,
#   security compliance settings will be managed from the Puppet server.
#
# * If used independently, all SIMP-managed security subsystems are disabled by
#   default, and must be explicitly opted into by administrators.  Please review
#   the +client_nets+ and +$enable_*+ parameters for details.
#
#
# == Parameters
#
# [*service_name*]
#   The name of the ipsec service.
#   Type: String
#   Default:  +$::libreswan::params::service_name+
#
# [*package_name*]
#   Type: String
#   Default:  +$::libreswan::params::package_name+
#   The name of the libreswan package.
#
# [*client_nets*]
#   Type: Array of Strings
#   Default: +['127.0.0.1/32']+
#   A whitelist of subnets (in CIDR notation) permitted access.
#
# [*enable_auditing*]
#   Type: Boolean
#   Default: +false+
#   If true, manage auditing for ipsec.
#
# [*simp_firewall*]
#   Type: Boolean
#   Default: +false+
#   If true, manage firewall rules to acommodate ipsec.
#
# [*enable_logging*]
#   Type: Boolean
#   Default: +false+
#   If true, manage logging configuration for ipsec.
#
# [*enable_pki*]
#   Type: Boolean
#   Default: +false+
#   If true, manage PKI/PKE configuration for ipsec.
#
#   Type: Boolean
#   Default: +false+
#   If true, manage TCP wrappers configuration for ipsec.
#
# [*use_fips*]
#   Type: Boolean
#   Default: +false+
#   If true, configure the system to be FIPS compliant.
#
# [*use_simp_pki*]
#   Type: Boolean
#   Default: +false+
#   If true, manage manage the pki certificates for this system.
#
# [*certsource*]
#   Type: Absolute Path
#   Default: +/etc/pki/ipsec+
#   Used if use_simp_pki is true to copy certs locally for ipsec.
#
# [*nsspassword*]
#   Type: String
#   Default: +autogenerated using passgen+
#   Password used for IPSEC NSS database.
#
# [*ipsecdir*]
#   Type: Absolute Path
#   Default: +/etc/ipsec.d/+
#   The directory to store all IPSEC configuration information.
#
# The other parameters are all setting for the ipsec.conf file. See the
# Libreswan doumentation https://libreswan.org/man/ipsec.conf.5.html
# for more information reguarding these variables.
# Any variable set to undefined will not appear in the configuration
# file and will default to the value set by Libreswan.  Those set will
# appear in the configuration file but can be over written using the
# hiera yaml files.
#
# ikeport             Default:  500
# nat_ikeport         Default:  4500
# keep_alive          Default:  undef
# virtual_private     Default:  $::client_nets
# myvendorid          Default:  undef
# nhelpers            Default:  undef
# plutofork           Default:  undef
# crlcheckinterval    Default:  undef
# strictcrlpolicy     Default:  undef
# syslog              Default:  undef
# klipsdebug          Default:  'none'
# plutodebug          Default:  'none'
# uniqueids           Default:  undef
# plutorestartoncrash Default:  undef
# plutostderrlog      Default:  undef
# plutostderrlogtime  Default:  undef
# force_busy          Default:  undef
# dumpdir             Default:  /var/run/pluto
# statsbin            Default:  undef
# secretsfile         Default:  /etc/ipsec.secrets
# perpeerlog          Default:  undef
# perpeerlogdir       Default:  /var/log/pluto/peer
# fragicmp            Default:  undef
# hidetos             Default:  undef
# overridemtu         Default:  undef
# secctx-attr-value   Default:  undef
#
# == Authors
#
# * simp
#
class libreswan (
  $service_name = $::libreswan::params::service_name,
  $package_name = $::libreswan::params::package_name,
  $client_nets = defined('$::client_nets') ? {
    true  => getvar('::client_nets'),
    default => hiera('client_nets', ['127.0.0.1/32']) },
  $simp_firewall = defined('$::simp_firewall') ? {
    true => getvar('::simp_firewall'),
    default => hiera('simp_firewall',false) },
  $simp_logging = defined('$::simp_logging') ? {
    true => getvar('::simp_logging'),
    default => hiera('simp_logging',false) },
  $use_fips = defined('$::use_fips') ? {
    true => getvar('::use_fips'),
    default => hiera('use_fips',false) },
  $use_simp_pki = defined('$::use_simp_pki') ? {
    true  => getvar('::use_simp_pki'),
    default => hiera('use_simp_pki',false) },
  $nssdb_password = passgen('nssdb_password'),
# Possible Values in ipsec.conf file
  $myid = undef,
  $protostack = 'netkey',
  $interfaces = undef,
  $listen =  undef,
  $ikeport = '500',
  $nat_ikeport = '4500',
  $keep_alive = undef,
  $retransmits = 'yes',
  $virtual_private =  ['10.0.0.0/8','192.168.0.0/16','172.16.0.0/12'],
  $myvendorid = undef,
  $nhelpers =  undef,
  $plutofork =  undef,
  $crlcheckinterval = undef,
  $strictcrlpolicy = undef,
  $syslog = undef,
  $klipsdebug = 'none',
  $plutodebug = 'none',
  $uniqueids = undef,
  $plutorestartoncrash = undef,
  $plutostderrlog = undef,
  $plutostderrlogtime = undef,
  $force_busy =  undef,
  $dumpdir = '/var/run/pluto',
  $statsbin = undef,
  $ipsecdir = '/etc/ipsec.d',
  $secretsfile = '/etc/ipsec.secrets',
  $perpeerlog = undef,
  $perpeerlogdir = '/var/log/pluto/peer',
  $fragicmp = undef,
  $hidetos = undef,
  $overridemtu = undef,
  $ipsec_client_nets = ['127.0.0.1/32'],
# Other Variables
  $certsource = '/etc/pki/ipsec',

) inherits ::libreswan::params {

  validate_string( $service_name )
  validate_string( $package_name )
  validate_array( $client_nets )
  validate_array( $ipsec_client_nets )
  validate_bool( $simp_firewall )
  validate_bool( $simp_logging )
  validate_bool( $use_simp_pki )
  validate_bool( $use_fips )
  # config setup section of ipsec.conf
  if $strictcrlpolicy {
    validate_re($strictcrlpolicy,
      '(yes|no)$',
      "${strictcrlpolicy} is not supported for strictcrlpolicy")
  }
  if $force_busy {
    validate_re($force_busy,
      '(yes|no)$',
      "${force_busy} is not supported for force_busy")
  }
  if $hidetos {
    validate_re($hidetos,
    '(yes|no)$',"${hidetos} is not supported for hidetos")
  }
  if $plutofork {
    validate_re($plutofork,
      '(yes|no)$',
      "${plutofork} is not supported for plutofork")
  }
  if $uniqueids {
    validate_re($uniqueids,
      '(yes|no)$',
      "${uniqueids} is not supported for uniqueids")
  }
  if $retransmits {
    validate_re($retransmits,
      '(yes|no)$',
      "${retransmits} is not supported for retransmits")
  }
  if $plutorestartoncrash {
    validate_re($plutorestartoncrash,
      '(yes|no)$',
      "${plutorestartoncrash} is not supported for plutorestartoncrash")
  }
  if $fragicmp {
    validate_re($fragicmp,
      '(yes|no)$',
      "${fragicmp} is not supported for fragicmp")
  }
  if $listen { validate_ipv4_address($listen) }
  if $perpeerlog {
    validate_re($perpeerlog,
      '(yes|no)$',
      "${perpeerlog} is not supported for perpeerlog")
  }
  if $nhelpers { validate_integer($nhelpers)}
  if $overridemtu { validate_integer($overridemtu)}
  if $keep_alive { validate_integer($keep_alive)}
  if $crlcheckinterval { validate_integer($crlcheckinterval)}
  if $myvendorid { validate_string($myvendorid)}
  if $statsbin { validate_string($statsbin)}
  if $syslog { validate_string($syslog)}
  if $plutostderrlog { validate_absolute_path ($plutostderrlog) }
  validate_absolute_path($ipsecdir)
  validate_absolute_path($secretsfile)
  validate_absolute_path($dumpdir)
  validate_array_member($protostack,['netkey','klips','mast'])
  validate_integer($ikeport)
  validate_integer($nat_ikeport)
  validate_re($retransmits,'(yes|no)$',"${retransmits} invalid for retransmits")
  case $interfaces {
    undef  : {}
    '%none' : {}
    '%defaultroute' : {}
    default :
      {validate_re($interfaces,
        '((\w+=\w+)|(\%defaultroute))(\s+((\w+=\w+)|(\%defaultroute)))*',
        "${interfaces} is not supported")}
  }

  if $::libreswan::use_fips {
    $token = 'NSS FIPS 140-2 Certificate DB' }
  else {
    $token = 'NSS Certificate DB' }

  $nsspassword = "${ipsecdir}/nsspassword"

  include '::libreswan::install'
  include '::libreswan::config'
  include '::libreswan::service'
  Class[ '::libreswan::install' ] ->
  Class[ '::libreswan::config'  ] ~>
  Class[ '::libreswan::service' ] ->
  Class[ '::libreswan' ]

  include '::libreswan::config::pki'
  Class[ '::libreswan::config'  ] ->
  Class[ '::libreswan::config::pki']

  include '::libreswan::nsspki'
  Class[ '::libreswan::config::pki'  ] ~>
  Class[ '::libreswan::nsspki'  ]


  if $simp_firewall {
    include '::libreswan::config::firewall'
    Class[ '::libreswan::config::firewall' ] ~>
    Class[ '::libreswan::service'  ]
  }

  if $simp_logging {
    include '::libreswan::config::logging'
    Class[ '::libreswan::config::logging' ] ~>
    Class[ '::libreswan::service' ]
  }

}
